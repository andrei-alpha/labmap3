// Generated by CoffeeScript 1.6.3
(function() {
  var adjustZoom, availableColor, availableFilter, changingFilter, createMachine, currentFilter, currentState, lastFilter, photoHeight, photoWidth, setTextFilter, sidebarOpen, textFilter, unknownColor, updateFilter, updateHoists, updateMachine, updateMachines, updateTextFilter, updateUserList, zoom;

  photoWidth = 15;

  photoHeight = 20;

  unknownColor = '#D19D9D';

  availableColor = '#9DD1B5';

  zoom = d3.behavior.zoom();

  adjustZoom = function() {
    var transform;
    transform = "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")";
    d3.select('#viewport').attr('transform', transform);
    return d3.select('#hoisted').attr('transform', transform);
  };

  currentState = null;

  currentFilter = null;

  sidebarOpen = false;

  changingFilter = false;

  lastFilter = null;

  createMachine = function(d, i) {
    var g, x, y;
    g = d3.select(this);
    x = d.pos.x - photoWidth / 2;
    y = d.pos.y - photoHeight / 2;
    g.attr('id', d.hostname);
    g.append('title').text(d.hostname);
    g.append('rect').attr('x', x).attr('y', y).attr('width', photoWidth).attr('height', photoHeight).attr('clip-path', 'url(#photo-clip-path)').attr('fill', unknownColor);
    return g.append('image').attr('class', 'user-photo').attr('id', function(d) {
      return d.hostname;
    }).attr('x', function(d) {
      return d.pos.x - photoWidth / 2;
    }).attr('y', function(d) {
      return d.pos.y - photoHeight / 2;
    }).attr('width', photoWidth).attr('height', photoHeight).attr('clip-path', 'url(#photo-clip-path)').style('opacity', 0).on('click', function(d) {
      var datum;
      datum = d || d3.select(this.correspondingElement).datum();
      return setTextFilter(datum.state.fullName);
    });
  };

  availableFilter = function(d, i) {
    return d.state === 'AVAILABLE';
  };

  textFilter = function(filterString) {
    var words;
    words = filterString.toLowerCase().split(' ');
    return function(d, i) {
      var lowerCaseName, w, _i, _len;
      if (d.state.fullName == null) {
        return false;
      }
      lowerCaseName = d.state.fullName.toLowerCase();
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        w = words[_i];
        if (lowerCaseName.indexOf(w) === -1) {
          return false;
        }
      }
      return true;
    };
  };

  updateTextFilter = function() {
    var filterText;
    if (changingFilter) {
      return;
    }
    filterText = d3.select('#filter-box').property('value');
    changingFilter = true;
    d3.select('#filter-available').property('checked', false);
    currentFilter = filterText === "" ? null : textFilter(filterText);
    updateFilter();
    return changingFilter = false;
  };

  setTextFilter = function(filterText) {
    if (lastFilter === filterText) {
      lastFilter = null;
      d3.select('#filter-box').property('value', '');
    } else {
      lastFilter = filterText;
      d3.select('#filter-box').property('value', filterText);
    }
    return updateTextFilter();
  };

  updateHoists = function() {
    var hoists, m, matchingMachines;
    matchingMachines = [];
    if (currentFilter != null) {
      matchingMachines = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = currentState.length; _i < _len; _i++) {
          m = currentState[_i];
          if (currentFilter(m)) {
            _results.push(m);
          }
        }
        return _results;
      })();
    }
    hoists = d3.select('#hoisted').selectAll('use').data(matchingMachines, function(d) {
      return d.hostname;
    });
    hoists.enter().append('use').attr('xlink:href', function(d) {
      return '#' + d.hostname;
    });
    return hoists.exit().remove();
  };

  updateUserList = function(userList, userEntries) {
    var elements;
    elements = userList.selectAll('li').data(userEntries, function(d) {
      return d.username;
    });
    elements.enter().append('li').text(function(d) {
      return d.fullName;
    }).on('click', function(d) {
      return setTextFilter(d.fullName);
    });
    return elements.exit().remove();
  };

  updateFilter = function() {
    var entry, overlayOpacity, selectedUserEntries, unselectedUserEntries, _i, _len;
    overlayOpacity = currentFilter != null ? 0.6 : 0;
    d3.select('#shade').transition().attr('opacity', overlayOpacity).each('start', function() {
      if (currentFilter != null) {
        d3.select('#overlay').attr('visibility', 'visible');
        return updateHoists();
      }
    }).each('end', function() {
      if (currentFilter == null) {
        d3.select('#overlay').attr('visibility', 'hidden');
        return updateHoists();
      }
    });
    selectedUserEntries = [];
    unselectedUserEntries = [];
    for (_i = 0, _len = currentState.length; _i < _len; _i++) {
      entry = currentState[_i];
      if (entry.state.username) {
        if ((currentFilter == null) || currentFilter(entry)) {
          selectedUserEntries.push(entry.state);
        } else {
          unselectedUserEntries.push(entry.state);
        }
      }
    }
    updateUserList(d3.select('#selected-user-list'), selectedUserEntries);
    return updateUserList(d3.select('#unselected-user-list'), unselectedUserEntries);
  };

  updateMachine = function(d, i) {
    var color, g, photo, photoUrl, statusRect, title;
    g = d3.select(this);
    statusRect = g.select('rect');
    photo = g.select('image');
    title = g.select('title');
    if (d.state === 'AVAILABLE' || d.state === 'UNKNOWN') {
      color = d.state === 'AVAILABLE' ? availableColor : unknownColor;
      statusRect.attr('visibility', 'visible').transition().attr('fill', color).style('opacity', 1);
      photo.transition().style('opacity', 0);
      return title.text("" + d.hostname + " - " + (d.state.toLowerCase()));
    } else {
      photoUrl = 'img/' + (d.state.photo || 'anon.jpg');
      if (photo.attr('xlink:href') !== photoUrl) {
        photo.attr('xlink:href', photoUrl);
      }
      photo.transition().delay(500).style('opacity', d.state.lockTime != null ? 0.5 : 1).each('end', function() {
        return statusRect.attr('visibility', 'hidden');
      });
      if (d.state.lockTime != null) {
        statusRect.transition().delay(500).style('opacity', 0);
      }
      return title.text("" + d.hostname + " - " + d.state.fullName + " (" + d.state.username + ")");
    }
  };

  updateMachines = function() {
    return d3.json('/labstate', function(err, ls) {
      var hostname, machines, state, userEntries;
      if (ls == null) {

      } else if (ls['UNAVAILABLE']) {

      } else {
        userEntries = [];
        currentState = [];
        for (hostname in ls) {
          state = ls[hostname];
          if (state.username) {
            userEntries.push(state);
          }
          currentState.push({
            hostname: hostname,
            state: state
          });
        }
        machines = d3.select('#computers').selectAll('g').data(currentState, function(d) {
          return d.hostname;
        });
        machines.each(updateMachine);
        machines.exit().each(function(d, i) {
          return updateMachine.call(this, {
            hostname: d.hostname,
            state: 'UNKNOWN'
          }, i);
        });
      }
      return updateFilter();
    });
  };

  d3.xml('labmap.svg', 'image/svg+xml', function(xml) {
    var desiredSize, scale, svg, xShift, yShift;
    svg = d3.select('#map').select(function() {
      return this.appendChild(xml.documentElement);
    });
    svg.call(zoom.on('zoom', adjustZoom));
    desiredSize = window.innerHeight * 0.9;
    scale = desiredSize / 750;
    xShift = (window.innerWidth - desiredSize) / 2 * 0.95;
    yShift = (window.innerHeight - desiredSize) / 2 * 1.3;
    zoom.scale(scale);
    zoom.translate([xShift, yShift]);
    zoom.event(svg);
    return d3.json('layout.json', function(err, layout) {
      var desc, descs, dist, i, machine, machines, num, spline, splineLen, splineMachines, _i, _j, _k, _len, _len1, _ref, _ref1;
      machines = [];
      for (spline in layout) {
        descs = layout[spline];
        spline = d3.select('#' + spline).node();
        splineLen = spline.getTotalLength();
        splineMachines = [];
        for (_i = 0, _len = descs.length; _i < _len; _i++) {
          desc = descs[_i];
          for (i = _j = _ref = desc['from'], _ref1 = desc['to']; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
            num = i + '';
            if (num.length < 2) {
              num = '0' + num;
            }
            splineMachines.push({
              group: desc['group'],
              hostname: desc['group'] + num
            });
          }
        }
        for (i = _k = 0, _len1 = splineMachines.length; _k < _len1; i = ++_k) {
          machine = splineMachines[i];
          dist = splineMachines.length === 1 ? 0 : splineLen * i / (splineMachines.length - 1);
          machine.pos = spline.getPointAtLength(dist);
        }
        machines = machines.concat(splineMachines);
      }
      d3.select('#computers').selectAll('g').data(machines, function(d) {
        return d.hostname;
      }).enter().append('g').each(createMachine);
      updateMachines();
      d3.select('#filter-available').on('change', function() {
        var filterText;
        if (changingFilter) {
          return;
        }
        changingFilter = true;
        filterText = d3.select('#filter-box').property('value', '');
        if (d3.select(this).property('checked')) {
          currentFilter = availableFilter;
        } else {
          currentFilter = null;
        }
        updateFilter();
        return changingFilter = false;
      });
      d3.select('#filter-box').on('keyup', updateTextFilter).on('change', updateTextFilter);
      return d3.select('#sidebar-toggle').on('click', function() {
        return d3.select('#sidebar').transition().style('right', sidebarOpen ? '-175px' : '0px').each('end', function() {
          return sidebarOpen = !sidebarOpen;
        });
      });
    });
  });

}).call(this);
