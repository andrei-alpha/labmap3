// Generated by CoffeeScript 1.6.3
(function() {
  var adjustZoom, availableColor, createMachine, machineGroups, photoHeight, photoWidth, unknownColor, updateMachines, zoom;

  photoWidth = 15;

  photoHeight = 20;

  unknownColor = '#D19D9D';

  availableColor = '#9DD1B5';

  zoom = d3.behavior.zoom();

  adjustZoom = function() {
    return d3.select('#viewport').attr('transform', "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
  };

  machineGroups = ['pixel', 'texel', 'matrix', 'visual', 'corona', 'edge', 'unsgnd'];

  createMachine = function(d, i) {
    var g, x, y;
    g = d3.select(this);
    x = d.pos.x - photoWidth / 2;
    y = d.pos.y - photoHeight / 2;
    g.append('title').text(d.hostname);
    g.append('rect').attr('x', x).attr('y', y).attr('width', photoWidth).attr('height', photoHeight).attr('clip-path', 'url(#photo-clip-path)').attr('fill', unknownColor);
    return g.append('image').attr('id', function(d) {
      return d.hostname;
    }).attr('x', function(d) {
      return d.pos.x - photoWidth / 2;
    }).attr('y', function(d) {
      return d.pos.y - photoHeight / 2;
    }).attr('width', photoWidth).attr('height', photoHeight).attr('clip-path', 'url(#photo-clip-path)').style('opacity', 0);
  };

  updateMachines = function() {
    return d3.json('/labstate', function(err, ls) {
      var hostname, state, stateData;
      if (ls['UNAVAILABLE']) {

      } else {
        stateData = (function() {
          var _results;
          _results = [];
          for (hostname in ls) {
            state = ls[hostname];
            _results.push({
              hostname: hostname,
              state: state
            });
          }
          return _results;
        })();
        return d3.select('#computers').selectAll('g').data(stateData, function(d) {
          return d.hostname;
        }).each(function(d, i) {
          var color, g, photo, statusRect, title;
          g = d3.select(this);
          statusRect = g.select('rect');
          photo = g.select('image');
          title = g.select('title');
          if (d.state === 'AVAILABLE' || d.state === 'UNKNOWN') {
            color = d.state === 'AVAILABLE' ? availableColor : unknownColor;
            statusRect.attr('visibility', 'visible').transition().attr('fill', color);
            photo.transition().style('opacity', 0);
            return title.text("" + d.hostname + " - " + (d.state.toLowerCase()));
          } else {
            photo.attr('xlink:href', 'img/' + d.state.photo).transition().delay(500).style('opacity', 1).each('end', function() {
              return statusRect.attr('visibility', 'hidden');
            });
            return title.text("" + d.hostname + " - " + d.state.fullName);
          }
        });
      }
    });
  };

  d3.xml('labmap.svg', 'image/svg+xml', function(xml) {
    var svg;
    svg = d3.select('#map').select(function() {
      return this.appendChild(xml.documentElement);
    });
    svg.call(zoom.on('zoom', adjustZoom));
    return d3.json('layout.json', function(err, layout) {
      var desc, descs, dist, i, machine, machines, num, spline, splineLen, splineMachines, _i, _j, _k, _len, _len1, _ref, _ref1;
      machines = [];
      for (spline in layout) {
        descs = layout[spline];
        spline = d3.select('#' + spline)[0][0];
        splineLen = spline.getTotalLength();
        splineMachines = [];
        for (_i = 0, _len = descs.length; _i < _len; _i++) {
          desc = descs[_i];
          for (i = _j = _ref = desc['from'], _ref1 = desc['to']; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
            num = i + '';
            if (num.length < 2) {
              num = '0' + num;
            }
            splineMachines.push({
              group: desc['group'],
              hostname: desc['group'] + num
            });
          }
        }
        for (i = _k = 0, _len1 = splineMachines.length; _k < _len1; i = ++_k) {
          machine = splineMachines[i];
          dist = splineMachines.length === 1 ? 0 : splineLen * i / (splineMachines.length - 1);
          machine.pos = spline.getPointAtLength(dist);
        }
        machines = machines.concat(splineMachines);
      }
      d3.select('#computers').selectAll('g').data(machines, function(d) {
        return d.hostname;
      }).enter().append('g').each(createMachine);
      return setInterval(updateMachines, 1000);
    });
  });

}).call(this);
